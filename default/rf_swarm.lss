
rf_swarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003a  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000d6  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000089  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000239  00000000  00000000  00000423  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000af  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000001e  00000000  00000000  0000074b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  64:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Drive_motor>:
#define F_CPU 8000000UL
#define BAUD_PRESCALE (((F_CPU/(USART_BAUDRATE*16UL)))-1)

void Drive_motor(unsigned char left, unsigned char right)
{
	if(left==0) //stops left motor
  6c:	88 23       	and	r24, r24
  6e:	11 f4       	brne	.+4      	; 0x74 <Drive_motor+0x8>
	{
		PORTB&=~_BV(4);
  70:	c4 98       	cbi	0x18, 4	; 24
		PORTB&=~_BV(5);
  72:	c5 98       	cbi	0x18, 5	; 24
	}
	
	if(right==0) //stops right motor
  74:	66 23       	and	r22, r22
  76:	11 f4       	brne	.+4      	; 0x7c <Drive_motor+0x10>
	{
		PORTB&=~_BV(6);
  78:	c6 98       	cbi	0x18, 6	; 24
		PORTB&=~_BV(7);
  7a:	c7 98       	cbi	0x18, 7	; 24
	}
	
	if(left==1) //left motor - forward
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	11 f4       	brne	.+4      	; 0x84 <Drive_motor+0x18>
	{
		PORTB|=_BV(4);
  80:	c4 9a       	sbi	0x18, 4	; 24
		PORTB&=~_BV(5);
  82:	c5 98       	cbi	0x18, 5	; 24
	}

	if(right==1) //right motor - forward
  84:	61 30       	cpi	r22, 0x01	; 1
  86:	11 f4       	brne	.+4      	; 0x8c <Drive_motor+0x20>
	{
		PORTB|=_BV(7);
  88:	c7 9a       	sbi	0x18, 7	; 24
		PORTB&=~_BV(6);
  8a:	c6 98       	cbi	0x18, 6	; 24
	}

	if(left==2) //left motor - backward
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	11 f4       	brne	.+4      	; 0x94 <Drive_motor+0x28>
	{
		PORTB|=_BV(5);
  90:	c5 9a       	sbi	0x18, 5	; 24
		PORTB&=~_BV(4);
  92:	c4 98       	cbi	0x18, 4	; 24
	}

	if(right==2) //right motor - backward
  94:	62 30       	cpi	r22, 0x02	; 2
  96:	11 f4       	brne	.+4      	; 0x9c <Drive_motor+0x30>
	{
		PORTB|=_BV(6);
  98:	c6 9a       	sbi	0x18, 6	; 24
		PORTB&=~_BV(7);
  9a:	c7 98       	cbi	0x18, 7	; 24
  9c:	08 95       	ret

0000009e <linefollow>:
	}
} 

void linefollow()
{
if((bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_set(PINA,0))&&(bit_is_set(PINA,4))) 
  9e:	c9 99       	sbic	0x19, 1	; 25
  a0:	0c c0       	rjmp	.+24     	; 0xba <linefollow+0x1c>
  a2:	ca 99       	sbic	0x19, 2	; 25
  a4:	0a c0       	rjmp	.+20     	; 0xba <linefollow+0x1c>
  a6:	cb 99       	sbic	0x19, 3	; 25
  a8:	08 c0       	rjmp	.+16     	; 0xba <linefollow+0x1c>
  aa:	c8 9b       	sbis	0x19, 0	; 25
  ac:	06 c0       	rjmp	.+12     	; 0xba <linefollow+0x1c>
  ae:	cc 9b       	sbis	0x19, 4	; 25
  b0:	04 c0       	rjmp	.+8      	; 0xba <linefollow+0x1c>
				{
					Drive_motor(1,1);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
				}
				if((bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,0))&&(bit_is_clear(PINA,4))) 
  ba:	c9 99       	sbic	0x19, 1	; 25
  bc:	0c c0       	rjmp	.+24     	; 0xd6 <linefollow+0x38>
  be:	ca 99       	sbic	0x19, 2	; 25
  c0:	0a c0       	rjmp	.+20     	; 0xd6 <linefollow+0x38>
  c2:	cb 99       	sbic	0x19, 3	; 25
  c4:	08 c0       	rjmp	.+16     	; 0xd6 <linefollow+0x38>
  c6:	c8 99       	sbic	0x19, 0	; 25
  c8:	06 c0       	rjmp	.+12     	; 0xd6 <linefollow+0x38>
  ca:	cc 99       	sbic	0x19, 4	; 25
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <linefollow+0x38>
				{
					Drive_motor(1,1);
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
				}
				if((bit_is_set(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,0))&&(bit_is_set(PINA,4))) 
  d6:	c9 9b       	sbis	0x19, 1	; 25
  d8:	0c c0       	rjmp	.+24     	; 0xf2 <linefollow+0x54>
  da:	ca 99       	sbic	0x19, 2	; 25
  dc:	0a c0       	rjmp	.+20     	; 0xf2 <linefollow+0x54>
  de:	cb 9b       	sbis	0x19, 3	; 25
  e0:	08 c0       	rjmp	.+16     	; 0xf2 <linefollow+0x54>
  e2:	c8 9b       	sbis	0x19, 0	; 25
  e4:	06 c0       	rjmp	.+12     	; 0xf2 <linefollow+0x54>
  e6:	cc 9b       	sbis	0x19, 4	; 25
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <linefollow+0x54>
				{
					Drive_motor(1,1);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
				}
				if((bit_is_set(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_set(PINA,0)))
  f2:	c9 9b       	sbis	0x19, 1	; 25
  f4:	0a c0       	rjmp	.+20     	; 0x10a <linefollow+0x6c>
  f6:	ca 99       	sbic	0x19, 2	; 25
  f8:	08 c0       	rjmp	.+16     	; 0x10a <linefollow+0x6c>
  fa:	cb 99       	sbic	0x19, 3	; 25
  fc:	06 c0       	rjmp	.+12     	; 0x10a <linefollow+0x6c>
  fe:	c8 9b       	sbis	0x19, 0	; 25
 100:	04 c0       	rjmp	.+8      	; 0x10a <linefollow+0x6c>
				{
					Drive_motor(0,1);
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
				}
				if((bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,4))&&(bit_is_set(PINA,0)))
 10a:	c9 9b       	sbis	0x19, 1	; 25
 10c:	0c c0       	rjmp	.+24     	; 0x126 <linefollow+0x88>
 10e:	ca 9b       	sbis	0x19, 2	; 25
 110:	0a c0       	rjmp	.+20     	; 0x126 <linefollow+0x88>
 112:	cb 99       	sbic	0x19, 3	; 25
 114:	08 c0       	rjmp	.+16     	; 0x126 <linefollow+0x88>
 116:	cc 99       	sbic	0x19, 4	; 25
 118:	06 c0       	rjmp	.+12     	; 0x126 <linefollow+0x88>
 11a:	c8 9b       	sbis	0x19, 0	; 25
 11c:	04 c0       	rjmp	.+8      	; 0x126 <linefollow+0x88>
				{
					Drive_motor(0,1);
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
				}
				if((bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
 126:	c9 99       	sbic	0x19, 1	; 25
 128:	0a c0       	rjmp	.+20     	; 0x13e <linefollow+0xa0>
 12a:	ca 99       	sbic	0x19, 2	; 25
 12c:	08 c0       	rjmp	.+16     	; 0x13e <linefollow+0xa0>
 12e:	cb 9b       	sbis	0x19, 3	; 25
 130:	06 c0       	rjmp	.+12     	; 0x13e <linefollow+0xa0>
 132:	cc 9b       	sbis	0x19, 4	; 25
 134:	04 c0       	rjmp	.+8      	; 0x13e <linefollow+0xa0>
				{
					Drive_motor(1,0);
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
				}
				if((bit_is_clear(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_clear(PINA,0))&&(bit_is_set(PINA,4)))
 13e:	c9 99       	sbic	0x19, 1	; 25
 140:	0c c0       	rjmp	.+24     	; 0x15a <linefollow+0xbc>
 142:	ca 9b       	sbis	0x19, 2	; 25
 144:	0a c0       	rjmp	.+20     	; 0x15a <linefollow+0xbc>
 146:	cb 9b       	sbis	0x19, 3	; 25
 148:	08 c0       	rjmp	.+16     	; 0x15a <linefollow+0xbc>
 14a:	c8 99       	sbic	0x19, 0	; 25
 14c:	06 c0       	rjmp	.+12     	; 0x15a <linefollow+0xbc>
 14e:	cc 9b       	sbis	0x19, 4	; 25
 150:	04 c0       	rjmp	.+8      	; 0x15a <linefollow+0xbc>
				{
					Drive_motor(1,0);
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
				}
				if((bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_clear(PINA,0))&&(bit_is_clear(PINA,4)))
 15a:	c9 9b       	sbis	0x19, 1	; 25
 15c:	0c c0       	rjmp	.+24     	; 0x176 <linefollow+0xd8>
 15e:	ca 9b       	sbis	0x19, 2	; 25
 160:	0a c0       	rjmp	.+20     	; 0x176 <linefollow+0xd8>
 162:	cb 9b       	sbis	0x19, 3	; 25
 164:	08 c0       	rjmp	.+16     	; 0x176 <linefollow+0xd8>
 166:	c8 99       	sbic	0x19, 0	; 25
 168:	06 c0       	rjmp	.+12     	; 0x176 <linefollow+0xd8>
 16a:	cc 99       	sbic	0x19, 4	; 25
 16c:	04 c0       	rjmp	.+8      	; 0x176 <linefollow+0xd8>
				{
					Drive_motor(0,0);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
				}
				if((bit_is_clear(PINA,0))&&(bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
 176:	c8 99       	sbic	0x19, 0	; 25
 178:	0c c0       	rjmp	.+24     	; 0x192 <linefollow+0xf4>
 17a:	c9 9b       	sbis	0x19, 1	; 25
 17c:	0a c0       	rjmp	.+20     	; 0x192 <linefollow+0xf4>
 17e:	ca 9b       	sbis	0x19, 2	; 25
 180:	08 c0       	rjmp	.+16     	; 0x192 <linefollow+0xf4>
 182:	cb 9b       	sbis	0x19, 3	; 25
 184:	06 c0       	rjmp	.+12     	; 0x192 <linefollow+0xf4>
 186:	cc 9b       	sbis	0x19, 4	; 25
 188:	04 c0       	rjmp	.+8      	; 0x192 <linefollow+0xf4>
				{
					Drive_motor(1,0);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
				}
				/*if((bit_is_set(PINA,0))&&(bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,4)))
				{
					Drive_motor(2,1);
				} //Try in arena** */
				if((bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,0))&&(bit_is_clear(PINA,4)))
 192:	c9 9b       	sbis	0x19, 1	; 25
 194:	0c c0       	rjmp	.+24     	; 0x1ae <linefollow+0x110>
 196:	ca 9b       	sbis	0x19, 2	; 25
 198:	0a c0       	rjmp	.+20     	; 0x1ae <linefollow+0x110>
 19a:	cb 9b       	sbis	0x19, 3	; 25
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <linefollow+0x110>
 19e:	c8 9b       	sbis	0x19, 0	; 25
 1a0:	06 c0       	rjmp	.+12     	; 0x1ae <linefollow+0x110>
 1a2:	cc 99       	sbic	0x19, 4	; 25
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <linefollow+0x110>
				{
					Drive_motor(1,0);
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
				}
				/*if((bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,0))&&(bit_is_set(PINA,4)))
				{
					Drive_motor(1,2);
				}// Try in arena** */
				if((bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,0))&&(bit_is_set(PINA,4)))
 1ae:	c9 9b       	sbis	0x19, 1	; 25
 1b0:	0c c0       	rjmp	.+24     	; 0x1ca <linefollow+0x12c>
 1b2:	ca 9b       	sbis	0x19, 2	; 25
 1b4:	0a c0       	rjmp	.+20     	; 0x1ca <linefollow+0x12c>
 1b6:	cb 9b       	sbis	0x19, 3	; 25
 1b8:	08 c0       	rjmp	.+16     	; 0x1ca <linefollow+0x12c>
 1ba:	c8 9b       	sbis	0x19, 0	; 25
 1bc:	06 c0       	rjmp	.+12     	; 0x1ca <linefollow+0x12c>
 1be:	cc 9b       	sbis	0x19, 4	; 25
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <linefollow+0x12c>
				{
					Drive_motor(2,2); // reverse if out of loop. Finds loop again
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	62 e0       	ldi	r22, 0x02	; 2
 1c6:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
 1ca:	08 95       	ret

000001cc <main>:
				} //no differential rotation AT ALL (1,2)/(2,1)
}
int main()
{
 1cc:	1f 93       	push	r17
	char ReceivedByte;
	DDRB=0xFF;
 1ce:	9f ef       	ldi	r25, 0xFF	; 255
 1d0:	97 bb       	out	0x17, r25	; 23
	DDRD=0xFF;
 1d2:	91 bb       	out	0x11, r25	; 17
	DDRA=0x00;
 1d4:	1a ba       	out	0x1a, r1	; 26
	PORTB=0xFC;
 1d6:	8c ef       	ldi	r24, 0xFC	; 252
 1d8:	88 bb       	out	0x18, r24	; 24
	PORTD=0xFF;
 1da:	92 bb       	out	0x12, r25	; 18
	PORTA=0x00;
 1dc:	1b ba       	out	0x1b, r1	; 27

	UCSRB|=(1<<RXEN)|(1<<TXEN); //turn on rx and tx (can also be done using hex instead of 1<<RXEN)
 1de:	8a b1       	in	r24, 0x0a	; 10
 1e0:	88 61       	ori	r24, 0x18	; 24
 1e2:	8a b9       	out	0x0a, r24	; 10
	//1<<RXEN --> 1 shifted to RXEN.
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1); // asynchronous | 8bit character sizes.
 1e4:	80 b5       	in	r24, 0x20	; 32
 1e6:	86 68       	ori	r24, 0x86	; 134
 1e8:	80 bd       	out	0x20, r24	; 32

	UBRRL=BAUD_PRESCALE; //load lower 8bits of baud rate into UBRR low register
 1ea:	83 e3       	ldi	r24, 0x33	; 51
 1ec:	89 b9       	out	0x09, r24	; 9
	UBRRH=(BAUD_PRESCALE>>8); //load upper 8 bits of baud rate into UBRR high register
 1ee:	10 bc       	out	0x20, r1	; 32
				else
				{
					Drive_motor(0,0);
					//while((UCSRA&(1<<UDRE))==0){}
					ReceivedByte='2';
					UDR=ReceivedByte;   //ReceivedByte;
 1f0:	12 e3       	ldi	r17, 0x32	; 50
	UBRRL=BAUD_PRESCALE; //load lower 8bits of baud rate into UBRR low register
	UBRRH=(BAUD_PRESCALE>>8); //load upper 8 bits of baud rate into UBRR high register

	for(;;)
		{
			while((UCSRA&(1<<RXC))==0) {}
 1f2:	5f 9b       	sbis	0x0b, 7	; 11
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <main+0x26>
			ReceivedByte=UDR;
 1f6:	8c b1       	in	r24, 0x0c	; 12
			while(ReceivedByte=='1')
 1f8:	81 33       	cpi	r24, 0x31	; 49
 1fa:	d9 f7       	brne	.-10     	; 0x1f2 <main+0x26>
			{ 	
				if(bit_is_clear(PINA,6))
 1fc:	ce 99       	sbic	0x19, 6	; 25
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <main+0x3a>
				{
					linefollow();
 200:	0e 94 4f 00 	call	0x9e	; 0x9e <linefollow>
 204:	fb cf       	rjmp	.-10     	; 0x1fc <main+0x30>
					
				}
				else
				{
					Drive_motor(0,0);
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
					//while((UCSRA&(1<<UDRE))==0){}
					ReceivedByte='2';
					UDR=ReceivedByte;   //ReceivedByte;
 20e:	1c b9       	out	0x0c, r17	; 12
 210:	f0 cf       	rjmp	.-32     	; 0x1f2 <main+0x26>

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
