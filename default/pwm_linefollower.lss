
pwm_linefollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000039  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001ec  00000000  00000000  000002a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d5  00000000  00000000  0000048f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000025b  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000007c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a9  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000030  00000000  00000000  000008a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  000008d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  64:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Drive_motor>:
#include<util/delay.h>


void Drive_motor(unsigned char left, unsigned char right)
{
	if(left==0) //stops left motor
  6c:	88 23       	and	r24, r24
  6e:	11 f4       	brne	.+4      	; 0x74 <Drive_motor+0x8>
	{
		PORTB&=~_BV(4);
  70:	c4 98       	cbi	0x18, 4	; 24
		PORTB&=~_BV(5);
  72:	c5 98       	cbi	0x18, 5	; 24
	}
	
	if(right==0) //stops right motor
  74:	66 23       	and	r22, r22
  76:	11 f4       	brne	.+4      	; 0x7c <Drive_motor+0x10>
	{
		PORTB&=~_BV(6);
  78:	c6 98       	cbi	0x18, 6	; 24
		PORTB&=~_BV(7);
  7a:	c7 98       	cbi	0x18, 7	; 24
	}
	
	if(left==1) //left motor - forward
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	11 f4       	brne	.+4      	; 0x84 <Drive_motor+0x18>
	{
		PORTB|=_BV(4);
  80:	c4 9a       	sbi	0x18, 4	; 24
		PORTB&=~_BV(5);
  82:	c5 98       	cbi	0x18, 5	; 24
	}

	if(right==1) //right motor - forward
  84:	61 30       	cpi	r22, 0x01	; 1
  86:	11 f4       	brne	.+4      	; 0x8c <Drive_motor+0x20>
	{
		PORTB|=_BV(7);
  88:	c7 9a       	sbi	0x18, 7	; 24
		PORTB&=~_BV(6);
  8a:	c6 98       	cbi	0x18, 6	; 24
	}

	if(left==2) //left motor - backward
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	11 f4       	brne	.+4      	; 0x94 <Drive_motor+0x28>
	{
		PORTB|=_BV(5);
  90:	c5 9a       	sbi	0x18, 5	; 24
		PORTB&=~_BV(4);
  92:	c4 98       	cbi	0x18, 4	; 24
	}

	if(right==2) //right motor - backward
  94:	62 30       	cpi	r22, 0x02	; 2
  96:	11 f4       	brne	.+4      	; 0x9c <Drive_motor+0x30>
	{
		PORTB|=_BV(6);
  98:	c6 9a       	sbi	0x18, 6	; 24
		PORTB&=~_BV(7);
  9a:	c7 98       	cbi	0x18, 7	; 24
  9c:	08 95       	ret

0000009e <ocr_drive>:
} 


void ocr_drive(int a,int b)
{
	OCR1A=a;
  9e:	9b bd       	out	0x2b, r25	; 43
  a0:	8a bd       	out	0x2a, r24	; 42
	OCR1B=b;
  a2:	79 bd       	out	0x29, r23	; 41
  a4:	68 bd       	out	0x28, r22	; 40
}
  a6:	08 95       	ret

000000a8 <main>:

int main(void)
{
  a8:	cf 92       	push	r12
  aa:	df 92       	push	r13
  ac:	ef 92       	push	r14
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
	DDRB=0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFF;
  bc:	81 bb       	out	0x11, r24	; 17
	PORTB=0xFF;
  be:	88 bb       	out	0x18, r24	; 24
	PORTD=0xFF;
  c0:	82 bb       	out	0x12, r24	; 18
	PORTA=0x00;
  c2:	1b ba       	out	0x1b, r1	; 27

	//DDRD=0xFF;
	//PORTD=0x00;
	

	ICR1=10000;
  c4:	80 e1       	ldi	r24, 0x10	; 16
  c6:	97 e2       	ldi	r25, 0x27	; 39
  c8:	97 bd       	out	0x27, r25	; 39
  ca:	86 bd       	out	0x26, r24	; 38
	TCCR1A=(1<<COM1A1|1<<COM1B1|0<<COM1A0|0<<COM1B0|0<<FOC1A|0<<FOC1B|0<<WGM11|0<<WGM10); //check datasheet (can be written in hex/bin)
  cc:	80 ea       	ldi	r24, 0xA0	; 160
  ce:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM13|1<<CS11|0<<CS12|0<<CS10|0<<WGM12|0<<ICNC1|0<<ICES1);    //check datasheet (can be written in hex/bin)
  d0:	82 e1       	ldi	r24, 0x12	; 18
  d2:	8e bd       	out	0x2e, r24	; 46
} 


void ocr_drive(int a,int b)
{
	OCR1A=a;
  d4:	c0 e1       	ldi	r28, 0x10	; 16
  d6:	d7 e2       	ldi	r29, 0x27	; 39
	OCR1B=b;
  d8:	9c e4       	ldi	r25, 0x4C	; 76
  da:	c9 2e       	mov	r12, r25
  dc:	9d e1       	ldi	r25, 0x1D	; 29
  de:	d9 2e       	mov	r13, r25
	TCCR1B=(1<<WGM13|1<<CS11|0<<CS12|0<<CS10|0<<WGM12|0<<ICNC1|0<<ICES1);    //check datasheet (can be written in hex/bin)


	for(;;)
	{
		Drive_motor(1,1);
  e0:	88 e8       	ldi	r24, 0x88	; 136
  e2:	e8 2e       	mov	r14, r24
  e4:	83 e1       	ldi	r24, 0x13	; 19
  e6:	f8 2e       	mov	r15, r24
  e8:	04 ec       	ldi	r16, 0xC4	; 196
  ea:	19 e0       	ldi	r17, 0x09	; 9
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
		if((bit_is_set(PINA,0))&&(bit_is_set(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
  f4:	c8 9b       	sbis	0x19, 0	; 25
  f6:	0c c0       	rjmp	.+24     	; 0x110 <main+0x68>
  f8:	c9 9b       	sbis	0x19, 1	; 25
  fa:	0a c0       	rjmp	.+20     	; 0x110 <main+0x68>
  fc:	ca 99       	sbic	0x19, 2	; 25
  fe:	08 c0       	rjmp	.+16     	; 0x110 <main+0x68>
 100:	cb 9b       	sbis	0x19, 3	; 25
 102:	06 c0       	rjmp	.+12     	; 0x110 <main+0x68>
 104:	cc 9b       	sbis	0x19, 4	; 25
 106:	04 c0       	rjmp	.+8      	; 0x110 <main+0x68>
} 


void ocr_drive(int a,int b)
{
	OCR1A=a;
 108:	db bd       	out	0x2b, r29	; 43
 10a:	ca bd       	out	0x2a, r28	; 42
	OCR1B=b;
 10c:	d9 bd       	out	0x29, r29	; 41
 10e:	c8 bd       	out	0x28, r28	; 40
		Drive_motor(1,1);
		if((bit_is_set(PINA,0))&&(bit_is_set(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
		{
			ocr_drive(10000,10000);
		}
		if((bit_is_set(PINA,0))&&(bit_is_set(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_set(PINA,4)))
 110:	c8 9b       	sbis	0x19, 0	; 25
 112:	0c c0       	rjmp	.+24     	; 0x12c <main+0x84>
 114:	c9 9b       	sbis	0x19, 1	; 25
 116:	0a c0       	rjmp	.+20     	; 0x12c <main+0x84>
 118:	ca 99       	sbic	0x19, 2	; 25
 11a:	08 c0       	rjmp	.+16     	; 0x12c <main+0x84>
 11c:	cb 99       	sbic	0x19, 3	; 25
 11e:	06 c0       	rjmp	.+12     	; 0x12c <main+0x84>
 120:	cc 9b       	sbis	0x19, 4	; 25
 122:	04 c0       	rjmp	.+8      	; 0x12c <main+0x84>
} 


void ocr_drive(int a,int b)
{
	OCR1A=a;
 124:	db bd       	out	0x2b, r29	; 43
 126:	ca bd       	out	0x2a, r28	; 42
	OCR1B=b;
 128:	d9 bc       	out	0x29, r13	; 41
 12a:	c8 bc       	out	0x28, r12	; 40
		}
		if((bit_is_set(PINA,0))&&(bit_is_set(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_set(PINA,4)))
		{
			ocr_drive(10000,7500);
		}
		if((bit_is_set(PINA,0))&&(bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
 12c:	c8 9b       	sbis	0x19, 0	; 25
 12e:	0c c0       	rjmp	.+24     	; 0x148 <main+0xa0>
 130:	c9 99       	sbic	0x19, 1	; 25
 132:	0a c0       	rjmp	.+20     	; 0x148 <main+0xa0>
 134:	ca 99       	sbic	0x19, 2	; 25
 136:	08 c0       	rjmp	.+16     	; 0x148 <main+0xa0>
 138:	cb 9b       	sbis	0x19, 3	; 25
 13a:	06 c0       	rjmp	.+12     	; 0x148 <main+0xa0>
 13c:	cc 9b       	sbis	0x19, 4	; 25
 13e:	04 c0       	rjmp	.+8      	; 0x148 <main+0xa0>
} 


void ocr_drive(int a,int b)
{
	OCR1A=a;
 140:	db bc       	out	0x2b, r13	; 43
 142:	ca bc       	out	0x2a, r12	; 42
	OCR1B=b;
 144:	d9 bd       	out	0x29, r29	; 41
 146:	c8 bd       	out	0x28, r28	; 40
		}
		if((bit_is_set(PINA,0))&&(bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
		{
			ocr_drive(7500,10000);
		}
		if((bit_is_set(PINA,0))&&(bit_is_set(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,4)))
 148:	c8 9b       	sbis	0x19, 0	; 25
 14a:	0c c0       	rjmp	.+24     	; 0x164 <main+0xbc>
 14c:	c9 9b       	sbis	0x19, 1	; 25
 14e:	0a c0       	rjmp	.+20     	; 0x164 <main+0xbc>
 150:	ca 99       	sbic	0x19, 2	; 25
 152:	08 c0       	rjmp	.+16     	; 0x164 <main+0xbc>
 154:	cb 99       	sbic	0x19, 3	; 25
 156:	06 c0       	rjmp	.+12     	; 0x164 <main+0xbc>
 158:	cc 99       	sbic	0x19, 4	; 25
 15a:	04 c0       	rjmp	.+8      	; 0x164 <main+0xbc>
} 


void ocr_drive(int a,int b)
{
	OCR1A=a;
 15c:	db bd       	out	0x2b, r29	; 43
 15e:	ca bd       	out	0x2a, r28	; 42
	OCR1B=b;
 160:	f9 bc       	out	0x29, r15	; 41
 162:	e8 bc       	out	0x28, r14	; 40
		}
		if((bit_is_set(PINA,0))&&(bit_is_set(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,4)))
		{
			ocr_drive(10000,5000);
		}
		if((bit_is_clear(PINA,0))&&(bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
 164:	c8 99       	sbic	0x19, 0	; 25
 166:	0c c0       	rjmp	.+24     	; 0x180 <main+0xd8>
 168:	c9 99       	sbic	0x19, 1	; 25
 16a:	0a c0       	rjmp	.+20     	; 0x180 <main+0xd8>
 16c:	ca 99       	sbic	0x19, 2	; 25
 16e:	08 c0       	rjmp	.+16     	; 0x180 <main+0xd8>
 170:	cb 9b       	sbis	0x19, 3	; 25
 172:	06 c0       	rjmp	.+12     	; 0x180 <main+0xd8>
 174:	cc 9b       	sbis	0x19, 4	; 25
 176:	04 c0       	rjmp	.+8      	; 0x180 <main+0xd8>
} 


void ocr_drive(int a,int b)
{
	OCR1A=a;
 178:	fb bc       	out	0x2b, r15	; 43
 17a:	ea bc       	out	0x2a, r14	; 42
	OCR1B=b;
 17c:	d9 bd       	out	0x29, r29	; 41
 17e:	c8 bd       	out	0x28, r28	; 40
		}
		if((bit_is_clear(PINA,0))&&(bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
		{
			ocr_drive(5000,10000);
		}
		if((bit_is_set(PINA,0))&&(bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,4)))
 180:	c8 9b       	sbis	0x19, 0	; 25
 182:	0c c0       	rjmp	.+24     	; 0x19c <main+0xf4>
 184:	c9 9b       	sbis	0x19, 1	; 25
 186:	0a c0       	rjmp	.+20     	; 0x19c <main+0xf4>
 188:	ca 9b       	sbis	0x19, 2	; 25
 18a:	08 c0       	rjmp	.+16     	; 0x19c <main+0xf4>
 18c:	cb 99       	sbic	0x19, 3	; 25
 18e:	06 c0       	rjmp	.+12     	; 0x19c <main+0xf4>
 190:	cc 99       	sbic	0x19, 4	; 25
 192:	04 c0       	rjmp	.+8      	; 0x19c <main+0xf4>
} 


void ocr_drive(int a,int b)
{
	OCR1A=a;
 194:	db bd       	out	0x2b, r29	; 43
 196:	ca bd       	out	0x2a, r28	; 42
	OCR1B=b;
 198:	19 bd       	out	0x29, r17	; 41
 19a:	08 bd       	out	0x28, r16	; 40
		}
		if((bit_is_set(PINA,0))&&(bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,4)))
		{
			ocr_drive(10000,2500);
		}
		if((bit_is_clear(PINA,0))&&(bit_is_clear(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
 19c:	c8 99       	sbic	0x19, 0	; 25
 19e:	0c c0       	rjmp	.+24     	; 0x1b8 <main+0x110>
 1a0:	c9 99       	sbic	0x19, 1	; 25
 1a2:	0a c0       	rjmp	.+20     	; 0x1b8 <main+0x110>
 1a4:	ca 9b       	sbis	0x19, 2	; 25
 1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <main+0x110>
 1a8:	cb 9b       	sbis	0x19, 3	; 25
 1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <main+0x110>
 1ac:	cc 9b       	sbis	0x19, 4	; 25
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <main+0x110>
} 


void ocr_drive(int a,int b)
{
	OCR1A=a;
 1b0:	1b bd       	out	0x2b, r17	; 43
 1b2:	0a bd       	out	0x2a, r16	; 42
	OCR1B=b;
 1b4:	d9 bd       	out	0x29, r29	; 41
 1b6:	c8 bd       	out	0x28, r28	; 40
		}
		if((bit_is_clear(PINA,0))&&(bit_is_clear(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
		{
			ocr_drive(2500,10000);
		}
		if((bit_is_set(PINA,0))&&(bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_clear(PINA,4)))
 1b8:	c8 9b       	sbis	0x19, 0	; 25
 1ba:	0c c0       	rjmp	.+24     	; 0x1d4 <main+0x12c>
 1bc:	c9 9b       	sbis	0x19, 1	; 25
 1be:	0a c0       	rjmp	.+20     	; 0x1d4 <main+0x12c>
 1c0:	ca 9b       	sbis	0x19, 2	; 25
 1c2:	08 c0       	rjmp	.+16     	; 0x1d4 <main+0x12c>
 1c4:	cb 9b       	sbis	0x19, 3	; 25
 1c6:	06 c0       	rjmp	.+12     	; 0x1d4 <main+0x12c>
 1c8:	cc 99       	sbic	0x19, 4	; 25
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <main+0x12c>
} 


void ocr_drive(int a,int b)
{
	OCR1A=a;
 1cc:	db bd       	out	0x2b, r29	; 43
 1ce:	ca bd       	out	0x2a, r28	; 42
	OCR1B=b;
 1d0:	19 bc       	out	0x29, r1	; 41
 1d2:	18 bc       	out	0x28, r1	; 40
		}
		if((bit_is_set(PINA,0))&&(bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_clear(PINA,4)))
		{
			ocr_drive(10000,0);
		}
		if((bit_is_clear(PINA,0))&&(bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
 1d4:	c8 99       	sbic	0x19, 0	; 25
 1d6:	8a cf       	rjmp	.-236    	; 0xec <main+0x44>
 1d8:	c9 9b       	sbis	0x19, 1	; 25
 1da:	88 cf       	rjmp	.-240    	; 0xec <main+0x44>
 1dc:	ca 9b       	sbis	0x19, 2	; 25
 1de:	86 cf       	rjmp	.-244    	; 0xec <main+0x44>
 1e0:	cb 9b       	sbis	0x19, 3	; 25
 1e2:	84 cf       	rjmp	.-248    	; 0xec <main+0x44>
 1e4:	cc 9b       	sbis	0x19, 4	; 25
 1e6:	82 cf       	rjmp	.-252    	; 0xec <main+0x44>
} 


void ocr_drive(int a,int b)
{
	OCR1A=a;
 1e8:	1b bc       	out	0x2b, r1	; 43
 1ea:	1a bc       	out	0x2a, r1	; 42
	OCR1B=b;
 1ec:	d9 bd       	out	0x29, r29	; 41
 1ee:	c8 bd       	out	0x28, r28	; 40
 1f0:	7d cf       	rjmp	.-262    	; 0xec <main+0x44>

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
