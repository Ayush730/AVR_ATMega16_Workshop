
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002b  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000142  00000000  00000000  0000016f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d6  00000000  00000000  000002b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b6  00000000  00000000  00000387  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ca  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000058  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000692  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3b 00 	call	0x76	; 0x76 <main>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Servo_drive>:
#define F_CPU 8000000UL
#define BAUD_PRESCALE (((F_CPU/(USART_BAUDRATE*16UL)))-1)

void Servo_drive(int a,int b)
{
	OCR1A=a;
  6c:	9b bd       	out	0x2b, r25	; 43
  6e:	8a bd       	out	0x2a, r24	; 42
	OCR1B=b;
  70:	79 bd       	out	0x29, r23	; 41
  72:	68 bd       	out	0x28, r22	; 40
}
  74:	08 95       	ret

00000076 <main>:

int main()
{
	DDRA&=~_BV(0);
  76:	d0 98       	cbi	0x1a, 0	; 26
	PORTA|=_BV(0);
  78:	d8 9a       	sbi	0x1b, 0	; 27
	DDRB=0x03;
  7a:	83 e0       	ldi	r24, 0x03	; 3
  7c:	87 bb       	out	0x17, r24	; 23
	PORTB=0x03;
  7e:	88 bb       	out	0x18, r24	; 24

	
	UCSRB|=(1<<RXEN)|(1<<TXEN); //turn on rx and tx (can also be done using hex instead of 1<<RXEN)
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	88 61       	ori	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
//	1<<RXEN --> 1 shifted to RXEN.
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1); // asynchronous | 8bit character sizes.
  86:	80 b5       	in	r24, 0x20	; 32
  88:	86 68       	ori	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32

	UBRRL=BAUD_PRESCALE; //load lower 8bits of baud rate into UBRR low register
  8c:	83 e3       	ldi	r24, 0x33	; 51
  8e:	89 b9       	out	0x09, r24	; 9
	UBRRH=(BAUD_PRESCALE>>8); //load upper 8 bits of baud rate into UBRR high register
  90:	10 bc       	out	0x20, r1	; 32
	

	ICR1=10000;
  92:	80 e1       	ldi	r24, 0x10	; 16
  94:	97 e2       	ldi	r25, 0x27	; 39
  96:	97 bd       	out	0x27, r25	; 39
  98:	86 bd       	out	0x26, r24	; 38
	TCCR1A=(1<<COM1A1|1<<COM1B1|0<<COM1A0|0<<COM1B0|0<<FOC1A|0<<FOC1B|0<<WGM11|0<<WGM10); //check datasheet //(can be written in hex/bin)
  9a:	80 ea       	ldi	r24, 0xA0	; 160
  9c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM13|1<<CS11|0<<CS12|0<<CS10|0<<WGM12|0<<ICNC1|0<<ICES1);    //check datasheet (can be written //in hex/bin)
  9e:	82 e1       	ldi	r24, 0x12	; 18
  a0:	8e bd       	out	0x2e, r24	; 46

	ADMUX=0x61; //registers for ADC
  a2:	81 e6       	ldi	r24, 0x61	; 97
  a4:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0x8F;
  a6:	8f e8       	ldi	r24, 0x8F	; 143
  a8:	86 b9       	out	0x06, r24	; 6
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  aa:	29 e1       	ldi	r18, 0x19	; 25
  ac:	30 e0       	ldi	r19, 0x00	; 0

	for(;;)
	{
		ADCSRA|=(1<<ADSC); //conversion started for every loop
  ae:	36 9a       	sbi	0x06, 6	; 6
		
		while((ADCSRA&(1<<ADIF))==0) {}
  b0:	34 9b       	sbis	0x06, 4	; 6
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <main+0x3a>
		while((UCSRA&(1<<UDRE))==0){} //from serial code
  b4:	5d 9b       	sbis	0x0b, 5	; 11
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x3e>
			UDR=ADCH;
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	8c b9       	out	0x0c, r24	; 12
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	97 e2       	ldi	r25, 0x27	; 39
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x4c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c8:	d9 f7       	brne	.-10     	; 0xc0 <main+0x4a>
  ca:	f1 cf       	rjmp	.-30     	; 0xae <main+0x38>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
