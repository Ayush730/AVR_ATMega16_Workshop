
servo_serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002b  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000201  00000000  00000000  0000018b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000012e  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001cb  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d3  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000008e  00000000  00000000  0000078b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000819  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3b 00 	call	0x76	; 0x76 <main>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Servo_drive>:
#define F_CPU 8000000UL
#define BAUD_PRESCALE (((F_CPU/(USART_BAUDRATE*16UL)))-1)

void Servo_drive(int a,int b)
{
	OCR1A=a;
  6c:	9b bd       	out	0x2b, r25	; 43
  6e:	8a bd       	out	0x2a, r24	; 42
	OCR1B=b;
  70:	79 bd       	out	0x29, r23	; 41
  72:	68 bd       	out	0x28, r22	; 40
}
  74:	08 95       	ret

00000076 <main>:

int main()
{
	DDRD=0xFF;
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	81 bb       	out	0x11, r24	; 17
	//PORTD=0x00;

	
	UCSRB|=(1<<RXEN)|(1<<TXEN); //turn on rx and tx (can also be done using hex instead of 1<<RXEN)
  7a:	8a b1       	in	r24, 0x0a	; 10
  7c:	88 61       	ori	r24, 0x18	; 24
  7e:	8a b9       	out	0x0a, r24	; 10
//	1<<RXEN --> 1 shifted to RXEN.
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1); // asynchronous | 8bit character sizes.
  80:	80 b5       	in	r24, 0x20	; 32
  82:	86 68       	ori	r24, 0x86	; 134
  84:	80 bd       	out	0x20, r24	; 32

	UBRRL=BAUD_PRESCALE; //load lower 8bits of baud rate into UBRR low register
  86:	83 e3       	ldi	r24, 0x33	; 51
  88:	89 b9       	out	0x09, r24	; 9
	UBRRH=(BAUD_PRESCALE>>8); //load upper 8 bits of baud rate into UBRR high register
  8a:	10 bc       	out	0x20, r1	; 32
	

	ICR1=10000;
  8c:	80 e1       	ldi	r24, 0x10	; 16
  8e:	97 e2       	ldi	r25, 0x27	; 39
  90:	97 bd       	out	0x27, r25	; 39
  92:	86 bd       	out	0x26, r24	; 38
	TCCR1A=(1<<COM1A1|1<<COM1B1|0<<COM1A0|0<<COM1B0|0<<FOC1A|0<<FOC1B|0<<WGM11|0<<WGM10); //check datasheet 
  94:	80 ea       	ldi	r24, 0xA0	; 160
  96:	8f bd       	out	0x2f, r24	; 47

//(can be written in hex/bin)
	TCCR1B=(1<<WGM13|1<<CS11|0<<CS12|0<<CS10|0<<WGM12|0<<ICNC1|0<<ICES1);    //check datasheet (can be written 
  98:	82 e1       	ldi	r24, 0x12	; 18
  9a:	8e bd       	out	0x2e, r24	; 46
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	24 ed       	ldi	r18, 0xD4	; 212
  9e:	30 e3       	ldi	r19, 0x30	; 48

	//int a=300;
	
	while(1)
	{
	while((UCSRA&(1<<RXC))==0){}
  a0:	5f 9b       	sbis	0x0b, 7	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <main+0x2a>
	char b=UDR; 
  a4:	8c b1       	in	r24, 0x0c	; 12
	int j;
	if(b=='1')
  a6:	81 33       	cpi	r24, 0x31	; 49
  a8:	79 f4       	brne	.+30     	; 0xc8 <main+0x52>
  aa:	8a ef       	ldi	r24, 0xFA	; 250
  ac:	90 e0       	ldi	r25, 0x00	; 0
#define F_CPU 8000000UL
#define BAUD_PRESCALE (((F_CPU/(USART_BAUDRATE*16UL)))-1)

void Servo_drive(int a,int b)
{
	OCR1A=a;
  ae:	9b bd       	out	0x2b, r25	; 43
  b0:	8a bd       	out	0x2a, r24	; 42
	OCR1B=b;
  b2:	99 bd       	out	0x29, r25	; 41
  b4:	88 bd       	out	0x28, r24	; 40
  b6:	f9 01       	movw	r30, r18
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x42>
  bc:	c7 96       	adiw	r24, 0x37	; 55
	while((UCSRA&(1<<RXC))==0){}
	char b=UDR; 
	int j;
	if(b=='1')
	{
	for(int i=0;i<=(18);i++)
  be:	45 e0       	ldi	r20, 0x05	; 5
  c0:	8f 30       	cpi	r24, 0x0F	; 15
  c2:	94 07       	cpc	r25, r20
  c4:	a1 f7       	brne	.-24     	; 0xae <main+0x38>
  c6:	ec cf       	rjmp	.-40     	; 0xa0 <main+0x2a>
		j=250+i*(55);
		Servo_drive(j,j);
		_delay_ms(50);
	}
	}
	else if(b=='2')
  c8:	82 33       	cpi	r24, 0x32	; 50
  ca:	51 f7       	brne	.-44     	; 0xa0 <main+0x2a>
  cc:	82 ee       	ldi	r24, 0xE2	; 226
  ce:	94 e0       	ldi	r25, 0x04	; 4
#define F_CPU 8000000UL
#define BAUD_PRESCALE (((F_CPU/(USART_BAUDRATE*16UL)))-1)

void Servo_drive(int a,int b)
{
	OCR1A=a;
  d0:	9b bd       	out	0x2b, r25	; 43
  d2:	8a bd       	out	0x2a, r24	; 42
	OCR1B=b;
  d4:	99 bd       	out	0x29, r25	; 41
  d6:	88 bd       	out	0x28, r24	; 40
  d8:	f9 01       	movw	r30, r18
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x64>
  de:	c7 97       	sbiw	r24, 0x37	; 55
		_delay_ms(50);
	}
	}
	else if(b=='2')
	{
	for(int i=0;i<=(18);i++)
  e0:	8d 3c       	cpi	r24, 0xCD	; 205
  e2:	91 05       	cpc	r25, r1
  e4:	a9 f7       	brne	.-22     	; 0xd0 <main+0x5a>
  e6:	dc cf       	rjmp	.-72     	; 0xa0 <main+0x2a>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
