
eeprom_func.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000236  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000042  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001c1  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000130  00000000  00000000  00000459  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002af  00000000  00000000  00000589  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e8  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a0  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  74:	0c 94 df 00 	jmp	0x1be	; 0x1be <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Drive_motor>:
	}
}

void Drive_motor(unsigned char left, unsigned char right)
{
	if(left==0) //stops left motor
  7c:	88 23       	and	r24, r24
  7e:	11 f4       	brne	.+4      	; 0x84 <Drive_motor+0x8>
	{
		PORTB&=~_BV(4);
  80:	c4 98       	cbi	0x18, 4	; 24
		PORTB&=~_BV(5);
  82:	c5 98       	cbi	0x18, 5	; 24
	}
	
	if(right==0) //stops right motor
  84:	66 23       	and	r22, r22
  86:	11 f4       	brne	.+4      	; 0x8c <Drive_motor+0x10>
	{
		PORTB&=~_BV(6);
  88:	c6 98       	cbi	0x18, 6	; 24
		PORTB&=~_BV(7);
  8a:	c7 98       	cbi	0x18, 7	; 24
	}
	
	if(left==1) //left motor - forward
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	11 f4       	brne	.+4      	; 0x94 <Drive_motor+0x18>
	{
		PORTB|=_BV(4);
  90:	c4 9a       	sbi	0x18, 4	; 24
		PORTB&=~_BV(5);
  92:	c5 98       	cbi	0x18, 5	; 24
	}

	if(right==1) //right motor - forward
  94:	61 30       	cpi	r22, 0x01	; 1
  96:	11 f4       	brne	.+4      	; 0x9c <Drive_motor+0x20>
	{
		PORTB|=_BV(7);
  98:	c7 9a       	sbi	0x18, 7	; 24
		PORTB&=~_BV(6);
  9a:	c6 98       	cbi	0x18, 6	; 24
	}

	if(left==2) //left motor - backward
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	11 f4       	brne	.+4      	; 0xa4 <Drive_motor+0x28>
	{
		PORTB|=_BV(5);
  a0:	c5 9a       	sbi	0x18, 5	; 24
		PORTB&=~_BV(4);
  a2:	c4 98       	cbi	0x18, 4	; 24
	}

	if(right==2) //right motor - backward
  a4:	62 30       	cpi	r22, 0x02	; 2
  a6:	11 f4       	brne	.+4      	; 0xac <Drive_motor+0x30>
	{
		PORTB|=_BV(6);
  a8:	c6 9a       	sbi	0x18, 6	; 24
		PORTB&=~_BV(7);
  aa:	c7 98       	cbi	0x18, 7	; 24
  ac:	08 95       	ret

000000ae <eep>:

unsigned char eeprombyte; //address of this used. no cast pointer error occurs.

void eep()
{
	if(bit_is_clear(PIND,2))
  ae:	82 99       	sbic	0x10, 2	; 16
  b0:	04 c0       	rjmp	.+8      	; 0xba <eep+0xc>
	{
		eeprom_write_byte(&eeprombyte,0xff);
  b2:	80 e6       	ldi	r24, 0x60	; 96
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	6f ef       	ldi	r22, 0xFF	; 255
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <eep+0x12>
	}
	else
	{
		eeprom_write_byte(&eeprombyte,0x00);
  ba:	80 e6       	ldi	r24, 0x60	; 96
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__eewr_byte_m16a>
  c4:	08 95       	ret

000000c6 <main>:
		PORTB&=~_BV(7);
	}
} 

int main()
{
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
	for(;;)
	{

	DDRD=0x00;
	PORTD=0xff;
  ce:	1f ef       	ldi	r17, 0xFF	; 255
	DDRB=0xff;
	PORTB=0xfc;
  d0:	0c ef       	ldi	r16, 0xFC	; 252
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d2:	c9 e1       	ldi	r28, 0x19	; 25
  d4:	d0 e0       	ldi	r29, 0x00	; 0
int main()
{
	for(;;)
	{

	DDRD=0x00;
  d6:	11 ba       	out	0x11, r1	; 17
	PORTD=0xff;
  d8:	12 bb       	out	0x12, r17	; 18
	DDRB=0xff;
  da:	17 bb       	out	0x17, r17	; 23
	PORTB=0xfc;
  dc:	08 bb       	out	0x18, r16	; 24

	if(bit_is_clear(PIND,3))
  de:	83 99       	sbic	0x10, 3	; 16
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <main+0x22>
	{
		eep();
  e2:	0e 94 57 00 	call	0xae	; 0xae <eep>
  e6:	f7 cf       	rjmp	.-18     	; 0xd6 <main+0x10>
	}
	else
	{
		unsigned char x=eeprom_read_byte(&eeprombyte);
  e8:	80 e6       	ldi	r24, 0x60	; 96
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 ca 00 	call	0x194	; 0x194 <__eerd_byte_m16a>
		if(x==0xff)
  f0:	8f 3f       	cpi	r24, 0xFF	; 255
  f2:	e9 f5       	brne	.+122    	; 0x16e <main+0xa8>
		{
			//line follower (simple)
			if((bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3)))
  f4:	c9 99       	sbic	0x19, 1	; 25
  f6:	08 c0       	rjmp	.+16     	; 0x108 <main+0x42>
  f8:	ca 99       	sbic	0x19, 2	; 25
  fa:	06 c0       	rjmp	.+12     	; 0x108 <main+0x42>
  fc:	cb 99       	sbic	0x19, 3	; 25
  fe:	04 c0       	rjmp	.+8      	; 0x108 <main+0x42>
			{
				Drive_motor(1,1);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
			}
			if((bit_is_set(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3)))
 108:	c9 9b       	sbis	0x19, 1	; 25
 10a:	08 c0       	rjmp	.+16     	; 0x11c <main+0x56>
 10c:	ca 99       	sbic	0x19, 2	; 25
 10e:	06 c0       	rjmp	.+12     	; 0x11c <main+0x56>
 110:	cb 99       	sbic	0x19, 3	; 25
 112:	04 c0       	rjmp	.+8      	; 0x11c <main+0x56>
			{
				Drive_motor(0,1);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
			}
			if((bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_clear(PINA,3)))
 11c:	c9 9b       	sbis	0x19, 1	; 25
 11e:	08 c0       	rjmp	.+16     	; 0x130 <main+0x6a>
 120:	ca 9b       	sbis	0x19, 2	; 25
 122:	06 c0       	rjmp	.+12     	; 0x130 <main+0x6a>
 124:	cb 99       	sbic	0x19, 3	; 25
 126:	04 c0       	rjmp	.+8      	; 0x130 <main+0x6a>
			{
				Drive_motor(2,1);
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
			}
			if((bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_set(PINA,3)))
 130:	c9 99       	sbic	0x19, 1	; 25
 132:	08 c0       	rjmp	.+16     	; 0x144 <main+0x7e>
 134:	ca 99       	sbic	0x19, 2	; 25
 136:	06 c0       	rjmp	.+12     	; 0x144 <main+0x7e>
 138:	cb 9b       	sbis	0x19, 3	; 25
 13a:	04 c0       	rjmp	.+8      	; 0x144 <main+0x7e>
			{
				Drive_motor(1,0);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
			}
			if((bit_is_clear(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3)))
 144:	c9 99       	sbic	0x19, 1	; 25
 146:	08 c0       	rjmp	.+16     	; 0x158 <main+0x92>
 148:	ca 9b       	sbis	0x19, 2	; 25
 14a:	06 c0       	rjmp	.+12     	; 0x158 <main+0x92>
 14c:	cb 9b       	sbis	0x19, 3	; 25
 14e:	04 c0       	rjmp	.+8      	; 0x158 <main+0x92>
			{
				Drive_motor(1,2);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	62 e0       	ldi	r22, 0x02	; 2
 154:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
			}
			if((bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3)))
 158:	c9 9b       	sbis	0x19, 1	; 25
 15a:	bd cf       	rjmp	.-134    	; 0xd6 <main+0x10>
 15c:	ca 9b       	sbis	0x19, 2	; 25
 15e:	bb cf       	rjmp	.-138    	; 0xd6 <main+0x10>
 160:	cb 9b       	sbis	0x19, 3	; 25
 162:	b9 cf       	rjmp	.-142    	; 0xd6 <main+0x10>
			{
				Drive_motor(0,0);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
 16c:	b4 cf       	rjmp	.-152    	; 0xd6 <main+0x10>
			}
		}
		else
		{
		    //blink
			PORTB|=_BV(0); PORTB|=_BV(1);
 16e:	c0 9a       	sbi	0x18, 0	; 24
 170:	c1 9a       	sbi	0x18, 1	; 24
 172:	88 e8       	ldi	r24, 0x88	; 136
 174:	93 e1       	ldi	r25, 0x13	; 19
 176:	fe 01       	movw	r30, r28
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xb2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17e:	d9 f7       	brne	.-10     	; 0x176 <main+0xb0>
			_delay_ms(500);
			PORTB&=~_BV(0); PORTB&=~_BV(1);
 180:	c0 98       	cbi	0x18, 0	; 24
 182:	c1 98       	cbi	0x18, 1	; 24
 184:	88 e8       	ldi	r24, 0x88	; 136
 186:	93 e1       	ldi	r25, 0x13	; 19
 188:	fe 01       	movw	r30, r28
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 190:	d9 f7       	brne	.-10     	; 0x188 <main+0xc2>
 192:	a1 cf       	rjmp	.-190    	; 0xd6 <main+0x10>

00000194 <__eerd_byte_m16a>:
 194:	e1 99       	sbic	0x1c, 1	; 28
 196:	fe cf       	rjmp	.-4      	; 0x194 <__eerd_byte_m16a>
 198:	9f bb       	out	0x1f, r25	; 31
 19a:	8e bb       	out	0x1e, r24	; 30
 19c:	e0 9a       	sbi	0x1c, 0	; 28
 19e:	99 27       	eor	r25, r25
 1a0:	8d b3       	in	r24, 0x1d	; 29
 1a2:	08 95       	ret

000001a4 <__eewr_byte_m16a>:
 1a4:	26 2f       	mov	r18, r22

000001a6 <__eewr_r18_m16a>:
 1a6:	e1 99       	sbic	0x1c, 1	; 28
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <__eewr_r18_m16a>
 1aa:	9f bb       	out	0x1f, r25	; 31
 1ac:	8e bb       	out	0x1e, r24	; 30
 1ae:	2d bb       	out	0x1d, r18	; 29
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	e2 9a       	sbi	0x1c, 2	; 28
 1b6:	e1 9a       	sbi	0x1c, 1	; 28
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	08 95       	ret

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
