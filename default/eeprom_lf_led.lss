
eeprom_lf_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000328  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000042  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001c1  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000130  00000000  00000000  0000054b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000353  00000000  00000000  0000067b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000009d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ea  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a0  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  74:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Drive_motor>:
	}
}

void Drive_motor(unsigned char left, unsigned char right)
{
	if(left==0) //stops left motor
  7c:	88 23       	and	r24, r24
  7e:	11 f4       	brne	.+4      	; 0x84 <Drive_motor+0x8>
	{
		PORTB&=~_BV(4);
  80:	c4 98       	cbi	0x18, 4	; 24
		PORTB&=~_BV(5);
  82:	c5 98       	cbi	0x18, 5	; 24
	}
	
	if(right==0) //stops right motor
  84:	66 23       	and	r22, r22
  86:	11 f4       	brne	.+4      	; 0x8c <Drive_motor+0x10>
	{
		PORTB&=~_BV(6);
  88:	c6 98       	cbi	0x18, 6	; 24
		PORTB&=~_BV(7);
  8a:	c7 98       	cbi	0x18, 7	; 24
	}
	
	if(left==1) //left motor - forward
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	11 f4       	brne	.+4      	; 0x94 <Drive_motor+0x18>
	{
		PORTB|=_BV(4);
  90:	c4 9a       	sbi	0x18, 4	; 24
		PORTB&=~_BV(5);
  92:	c5 98       	cbi	0x18, 5	; 24
	}

	if(right==1) //right motor - forward
  94:	61 30       	cpi	r22, 0x01	; 1
  96:	11 f4       	brne	.+4      	; 0x9c <Drive_motor+0x20>
	{
		PORTB|=_BV(7);
  98:	c7 9a       	sbi	0x18, 7	; 24
		PORTB&=~_BV(6);
  9a:	c6 98       	cbi	0x18, 6	; 24
	}

	if(left==2) //left motor - backward
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	11 f4       	brne	.+4      	; 0xa4 <Drive_motor+0x28>
	{
		PORTB|=_BV(5);
  a0:	c5 9a       	sbi	0x18, 5	; 24
		PORTB&=~_BV(4);
  a2:	c4 98       	cbi	0x18, 4	; 24
	}

	if(right==2) //right motor - backward
  a4:	62 30       	cpi	r22, 0x02	; 2
  a6:	11 f4       	brne	.+4      	; 0xac <Drive_motor+0x30>
	{
		PORTB|=_BV(6);
  a8:	c6 9a       	sbi	0x18, 6	; 24
		PORTB&=~_BV(7);
  aa:	c7 98       	cbi	0x18, 7	; 24
  ac:	08 95       	ret

000000ae <eep>:

unsigned char eeprombyte; //address of this used. no cast pointer error occurs.

void eep()
{
	if(bit_is_clear(PIND,2))
  ae:	82 99       	sbic	0x10, 2	; 16
  b0:	04 c0       	rjmp	.+8      	; 0xba <eep+0xc>
	{
		eeprom_write_byte(&eeprombyte,0xff);
  b2:	80 e6       	ldi	r24, 0x60	; 96
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	6f ef       	ldi	r22, 0xFF	; 255
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <eep+0x12>
	}
	else
	{
		eeprom_write_byte(&eeprombyte,0x00);
  ba:	80 e6       	ldi	r24, 0x60	; 96
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	0e 94 4b 01 	call	0x296	; 0x296 <__eewr_byte_m16a>
  c4:	08 95       	ret

000000c6 <main>:
		PORTB&=~_BV(7);
	}
} 

int main()
{
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
	for(;;)
	{

	DDRD=0x00;
	PORTD=0xff;
  ce:	1f ef       	ldi	r17, 0xFF	; 255
	DDRB=0xff;
	PORTB=0xfc;
  d0:	0c ef       	ldi	r16, 0xFC	; 252
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d2:	c9 e1       	ldi	r28, 0x19	; 25
  d4:	d0 e0       	ldi	r29, 0x00	; 0
int main()
{
	for(;;)
	{

	DDRD=0x00;
  d6:	11 ba       	out	0x11, r1	; 17
	PORTD=0xff;
  d8:	12 bb       	out	0x12, r17	; 18
	DDRB=0xff;
  da:	17 bb       	out	0x17, r17	; 23
	PORTB=0xfc;
  dc:	08 bb       	out	0x18, r16	; 24
	PORTA&=~_BV(6);
  de:	de 98       	cbi	0x1b, 6	; 27
	PORTA&=~_BV(7);
  e0:	df 98       	cbi	0x1b, 7	; 27


	if(bit_is_clear(PIND,3))
  e2:	83 99       	sbic	0x10, 3	; 16
  e4:	03 c0       	rjmp	.+6      	; 0xec <main+0x26>
	{
		eep();
  e6:	0e 94 57 00 	call	0xae	; 0xae <eep>
  ea:	f5 cf       	rjmp	.-22     	; 0xd6 <main+0x10>
	}
	else
	{
		unsigned char x=eeprom_read_byte(&eeprombyte);
  ec:	80 e6       	ldi	r24, 0x60	; 96
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 43 01 	call	0x286	; 0x286 <__eerd_byte_m16a>
		if(x==0xff)
  f4:	8f 3f       	cpi	r24, 0xFF	; 255
  f6:	09 f0       	breq	.+2      	; 0xfa <main+0x34>
  f8:	b3 c0       	rjmp	.+358    	; 0x260 <main+0x19a>
		{
			//line follower
			PORTB&=~_BV(0);
  fa:	c0 98       	cbi	0x18, 0	; 24
			PORTB&=~_BV(1);
  fc:	c1 98       	cbi	0x18, 1	; 24
			if((bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_set(PINA,0))&&(bit_is_set(PINA,5))) 
  fe:	c9 99       	sbic	0x19, 1	; 25
 100:	0c c0       	rjmp	.+24     	; 0x11a <main+0x54>
 102:	ca 99       	sbic	0x19, 2	; 25
 104:	0a c0       	rjmp	.+20     	; 0x11a <main+0x54>
 106:	cb 99       	sbic	0x19, 3	; 25
 108:	08 c0       	rjmp	.+16     	; 0x11a <main+0x54>
 10a:	c8 9b       	sbis	0x19, 0	; 25
 10c:	06 c0       	rjmp	.+12     	; 0x11a <main+0x54>
 10e:	cd 9b       	sbis	0x19, 5	; 25
 110:	04 c0       	rjmp	.+8      	; 0x11a <main+0x54>
		{
			Drive_motor(1,1);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
		}
			if((bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,0))&&(bit_is_clear(PINA,5))) 
 11a:	c9 99       	sbic	0x19, 1	; 25
 11c:	0c c0       	rjmp	.+24     	; 0x136 <main+0x70>
 11e:	ca 99       	sbic	0x19, 2	; 25
 120:	0a c0       	rjmp	.+20     	; 0x136 <main+0x70>
 122:	cb 99       	sbic	0x19, 3	; 25
 124:	08 c0       	rjmp	.+16     	; 0x136 <main+0x70>
 126:	c8 99       	sbic	0x19, 0	; 25
 128:	06 c0       	rjmp	.+12     	; 0x136 <main+0x70>
 12a:	cd 99       	sbic	0x19, 5	; 25
 12c:	04 c0       	rjmp	.+8      	; 0x136 <main+0x70>
		{
			Drive_motor(1,1);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
		}
		if((bit_is_set(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_set(PINA,0)))
 136:	c9 9b       	sbis	0x19, 1	; 25
 138:	0a c0       	rjmp	.+20     	; 0x14e <main+0x88>
 13a:	ca 99       	sbic	0x19, 2	; 25
 13c:	08 c0       	rjmp	.+16     	; 0x14e <main+0x88>
 13e:	cb 99       	sbic	0x19, 3	; 25
 140:	06 c0       	rjmp	.+12     	; 0x14e <main+0x88>
 142:	c8 9b       	sbis	0x19, 0	; 25
 144:	04 c0       	rjmp	.+8      	; 0x14e <main+0x88>
		{
			Drive_motor(0,1);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
		}
		if((bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,4))&&(bit_is_set(PINA,0)))
 14e:	c9 9b       	sbis	0x19, 1	; 25
 150:	0c c0       	rjmp	.+24     	; 0x16a <main+0xa4>
 152:	ca 9b       	sbis	0x19, 2	; 25
 154:	0a c0       	rjmp	.+20     	; 0x16a <main+0xa4>
 156:	cb 99       	sbic	0x19, 3	; 25
 158:	08 c0       	rjmp	.+16     	; 0x16a <main+0xa4>
 15a:	cc 99       	sbic	0x19, 4	; 25
 15c:	06 c0       	rjmp	.+12     	; 0x16a <main+0xa4>
 15e:	c8 9b       	sbis	0x19, 0	; 25
 160:	04 c0       	rjmp	.+8      	; 0x16a <main+0xa4>
		{
			Drive_motor(0,1);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
		}
		if((bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
 16a:	c9 99       	sbic	0x19, 1	; 25
 16c:	0a c0       	rjmp	.+20     	; 0x182 <main+0xbc>
 16e:	ca 99       	sbic	0x19, 2	; 25
 170:	08 c0       	rjmp	.+16     	; 0x182 <main+0xbc>
 172:	cb 9b       	sbis	0x19, 3	; 25
 174:	06 c0       	rjmp	.+12     	; 0x182 <main+0xbc>
 176:	cc 9b       	sbis	0x19, 4	; 25
 178:	04 c0       	rjmp	.+8      	; 0x182 <main+0xbc>
		{
			Drive_motor(1,0);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
		}
		if((bit_is_clear(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_clear(PINA,0))&&(bit_is_set(PINA,4)))
 182:	c9 99       	sbic	0x19, 1	; 25
 184:	0c c0       	rjmp	.+24     	; 0x19e <main+0xd8>
 186:	ca 9b       	sbis	0x19, 2	; 25
 188:	0a c0       	rjmp	.+20     	; 0x19e <main+0xd8>
 18a:	cb 9b       	sbis	0x19, 3	; 25
 18c:	08 c0       	rjmp	.+16     	; 0x19e <main+0xd8>
 18e:	c8 99       	sbic	0x19, 0	; 25
 190:	06 c0       	rjmp	.+12     	; 0x19e <main+0xd8>
 192:	cc 9b       	sbis	0x19, 4	; 25
 194:	04 c0       	rjmp	.+8      	; 0x19e <main+0xd8>
		{
			Drive_motor(1,0);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
		}
		if((bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_clear(PINA,0))&&(bit_is_clear(PINA,4)))
 19e:	c9 9b       	sbis	0x19, 1	; 25
 1a0:	0c c0       	rjmp	.+24     	; 0x1ba <main+0xf4>
 1a2:	ca 9b       	sbis	0x19, 2	; 25
 1a4:	0a c0       	rjmp	.+20     	; 0x1ba <main+0xf4>
 1a6:	cb 9b       	sbis	0x19, 3	; 25
 1a8:	08 c0       	rjmp	.+16     	; 0x1ba <main+0xf4>
 1aa:	c8 99       	sbic	0x19, 0	; 25
 1ac:	06 c0       	rjmp	.+12     	; 0x1ba <main+0xf4>
 1ae:	cc 99       	sbic	0x19, 4	; 25
 1b0:	04 c0       	rjmp	.+8      	; 0x1ba <main+0xf4>
		{
			Drive_motor(0,0);
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
		}
		if((bit_is_clear(PINA,0))&&(bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
 1ba:	c8 99       	sbic	0x19, 0	; 25
 1bc:	0c c0       	rjmp	.+24     	; 0x1d6 <main+0x110>
 1be:	c9 9b       	sbis	0x19, 1	; 25
 1c0:	0a c0       	rjmp	.+20     	; 0x1d6 <main+0x110>
 1c2:	ca 9b       	sbis	0x19, 2	; 25
 1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <main+0x110>
 1c6:	cb 9b       	sbis	0x19, 3	; 25
 1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <main+0x110>
 1ca:	cc 9b       	sbis	0x19, 4	; 25
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <main+0x110>
		{
			Drive_motor(1,0);
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
		}
		if((bit_is_set(PINA,0))&&(bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,4)))
 1d6:	c8 9b       	sbis	0x19, 0	; 25
 1d8:	0c c0       	rjmp	.+24     	; 0x1f2 <main+0x12c>
 1da:	c9 99       	sbic	0x19, 1	; 25
 1dc:	0a c0       	rjmp	.+20     	; 0x1f2 <main+0x12c>
 1de:	ca 99       	sbic	0x19, 2	; 25
 1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <main+0x12c>
 1e2:	cb 99       	sbic	0x19, 3	; 25
 1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <main+0x12c>
 1e6:	cc 99       	sbic	0x19, 4	; 25
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <main+0x12c>
		{
			Drive_motor(2,1);
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
		} //Try in arena**
		if((bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,0))&&(bit_is_clear(PINA,4)))
 1f2:	c9 9b       	sbis	0x19, 1	; 25
 1f4:	0c c0       	rjmp	.+24     	; 0x20e <main+0x148>
 1f6:	ca 9b       	sbis	0x19, 2	; 25
 1f8:	0a c0       	rjmp	.+20     	; 0x20e <main+0x148>
 1fa:	cb 9b       	sbis	0x19, 3	; 25
 1fc:	08 c0       	rjmp	.+16     	; 0x20e <main+0x148>
 1fe:	c8 9b       	sbis	0x19, 0	; 25
 200:	06 c0       	rjmp	.+12     	; 0x20e <main+0x148>
 202:	cc 99       	sbic	0x19, 4	; 25
 204:	04 c0       	rjmp	.+8      	; 0x20e <main+0x148>
		{
			Drive_motor(1,0);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
		}
		if((bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,0))&&(bit_is_set(PINA,4)))
 20e:	c9 99       	sbic	0x19, 1	; 25
 210:	0c c0       	rjmp	.+24     	; 0x22a <main+0x164>
 212:	ca 99       	sbic	0x19, 2	; 25
 214:	0a c0       	rjmp	.+20     	; 0x22a <main+0x164>
 216:	cb 99       	sbic	0x19, 3	; 25
 218:	08 c0       	rjmp	.+16     	; 0x22a <main+0x164>
 21a:	c8 99       	sbic	0x19, 0	; 25
 21c:	06 c0       	rjmp	.+12     	; 0x22a <main+0x164>
 21e:	cc 9b       	sbis	0x19, 4	; 25
 220:	04 c0       	rjmp	.+8      	; 0x22a <main+0x164>
		{
			Drive_motor(1,2);
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	62 e0       	ldi	r22, 0x02	; 2
 226:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
		}// Try in arena**
		if((bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,0))&&(bit_is_set(PINA,4)))
 22a:	c9 9b       	sbis	0x19, 1	; 25
 22c:	0c c0       	rjmp	.+24     	; 0x246 <main+0x180>
 22e:	ca 9b       	sbis	0x19, 2	; 25
 230:	0a c0       	rjmp	.+20     	; 0x246 <main+0x180>
 232:	cb 9b       	sbis	0x19, 3	; 25
 234:	08 c0       	rjmp	.+16     	; 0x246 <main+0x180>
 236:	c8 9b       	sbis	0x19, 0	; 25
 238:	06 c0       	rjmp	.+12     	; 0x246 <main+0x180>
 23a:	cc 9b       	sbis	0x19, 4	; 25
 23c:	04 c0       	rjmp	.+8      	; 0x246 <main+0x180>
		{
			Drive_motor(2,2); // reverse if out of loop. Finds loop again
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	62 e0       	ldi	r22, 0x02	; 2
 242:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
		} //no differential rotation AT ALL (1,2)/(2,1)
		if(bit_is_set(PINA,6))
 246:	ce 9b       	sbis	0x19, 6	; 25
 248:	04 c0       	rjmp	.+8      	; 0x252 <main+0x18c>
		{
			Drive_motor(0,0);
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
		}
		if(bit_is_set(PINA,7))
 252:	cf 9b       	sbis	0x19, 7	; 25
 254:	40 cf       	rjmp	.-384    	; 0xd6 <main+0x10>
		{
			Drive_motor(0,0);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	0e 94 3e 00 	call	0x7c	; 0x7c <Drive_motor>
 25e:	3b cf       	rjmp	.-394    	; 0xd6 <main+0x10>
			
		}
		else
		{
		    //blink
			PORTB|=_BV(0); PORTB|=_BV(1);
 260:	c0 9a       	sbi	0x18, 0	; 24
 262:	c1 9a       	sbi	0x18, 1	; 24
 264:	88 e8       	ldi	r24, 0x88	; 136
 266:	93 e1       	ldi	r25, 0x13	; 19
 268:	fe 01       	movw	r30, r28
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <main+0x1a4>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 270:	d9 f7       	brne	.-10     	; 0x268 <main+0x1a2>
			_delay_ms(500);
			PORTB&=~_BV(0); PORTB&=~_BV(1);
 272:	c0 98       	cbi	0x18, 0	; 24
 274:	c1 98       	cbi	0x18, 1	; 24
 276:	88 e8       	ldi	r24, 0x88	; 136
 278:	93 e1       	ldi	r25, 0x13	; 19
 27a:	fe 01       	movw	r30, r28
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <main+0x1b6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 280:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 282:	d9 f7       	brne	.-10     	; 0x27a <main+0x1b4>
 284:	28 cf       	rjmp	.-432    	; 0xd6 <main+0x10>

00000286 <__eerd_byte_m16a>:
 286:	e1 99       	sbic	0x1c, 1	; 28
 288:	fe cf       	rjmp	.-4      	; 0x286 <__eerd_byte_m16a>
 28a:	9f bb       	out	0x1f, r25	; 31
 28c:	8e bb       	out	0x1e, r24	; 30
 28e:	e0 9a       	sbi	0x1c, 0	; 28
 290:	99 27       	eor	r25, r25
 292:	8d b3       	in	r24, 0x1d	; 29
 294:	08 95       	ret

00000296 <__eewr_byte_m16a>:
 296:	26 2f       	mov	r18, r22

00000298 <__eewr_r18_m16a>:
 298:	e1 99       	sbic	0x1c, 1	; 28
 29a:	fe cf       	rjmp	.-4      	; 0x298 <__eewr_r18_m16a>
 29c:	9f bb       	out	0x1f, r25	; 31
 29e:	8e bb       	out	0x1e, r24	; 30
 2a0:	2d bb       	out	0x1d, r18	; 29
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	e2 9a       	sbi	0x1c, 2	; 28
 2a8:	e1 9a       	sbi	0x1c, 1	; 28
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	08 95       	ret

000002b0 <_exit>:
 2b0:	f8 94       	cli

000002b2 <__stop_program>:
 2b2:	ff cf       	rjmp	.-2      	; 0x2b2 <__stop_program>
