
lf_hi_90.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002b  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a8  00000000  00000000  00000265  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000065  00000000  00000000  0000030d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c7  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000097  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  64:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Drive_motor>:
#include<avr/io.h>


void Drive_motor(unsigned char left, unsigned char right)
{
	if(left==0) //stops left motor
  6c:	88 23       	and	r24, r24
  6e:	11 f4       	brne	.+4      	; 0x74 <Drive_motor+0x8>
	{
		PORTB&=~_BV(4);
  70:	c4 98       	cbi	0x18, 4	; 24
		PORTB&=~_BV(5);
  72:	c5 98       	cbi	0x18, 5	; 24
	}
	
	if(right==0) //stops right motor
  74:	66 23       	and	r22, r22
  76:	11 f4       	brne	.+4      	; 0x7c <Drive_motor+0x10>
	{
		PORTB&=~_BV(6);
  78:	c6 98       	cbi	0x18, 6	; 24
		PORTB&=~_BV(7);
  7a:	c7 98       	cbi	0x18, 7	; 24
	}
	
	if(left==1) //left motor - forward
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	11 f4       	brne	.+4      	; 0x84 <Drive_motor+0x18>
	{
		PORTB|=_BV(4);
  80:	c4 9a       	sbi	0x18, 4	; 24
		PORTB&=~_BV(5);
  82:	c5 98       	cbi	0x18, 5	; 24
	}

	if(right==1) //right motor - forward
  84:	61 30       	cpi	r22, 0x01	; 1
  86:	11 f4       	brne	.+4      	; 0x8c <Drive_motor+0x20>
	{
		PORTB|=_BV(7);
  88:	c7 9a       	sbi	0x18, 7	; 24
		PORTB&=~_BV(6);
  8a:	c6 98       	cbi	0x18, 6	; 24
	}

	if(left==2) //left motor - backward
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	11 f4       	brne	.+4      	; 0x94 <Drive_motor+0x28>
	{
		PORTB|=_BV(5);
  90:	c5 9a       	sbi	0x18, 5	; 24
		PORTB&=~_BV(4);
  92:	c4 98       	cbi	0x18, 4	; 24
	}

	if(right==2) //right motor - backward
  94:	62 30       	cpi	r22, 0x02	; 2
  96:	11 f4       	brne	.+4      	; 0x9c <Drive_motor+0x30>
	{
		PORTB|=_BV(6);
  98:	c6 9a       	sbi	0x18, 6	; 24
		PORTB&=~_BV(7);
  9a:	c7 98       	cbi	0x18, 7	; 24
  9c:	08 95       	ret

0000009e <main>:
	}
} 

int main()
{
	DDRB=0xFF;
  9e:	9f ef       	ldi	r25, 0xFF	; 255
  a0:	97 bb       	out	0x17, r25	; 23
	DDRD=0xFF;
  a2:	91 bb       	out	0x11, r25	; 17
	PORTB=0xFC;
  a4:	8c ef       	ldi	r24, 0xFC	; 252
  a6:	88 bb       	out	0x18, r24	; 24
	PORTD=0xFF;
  a8:	92 bb       	out	0x12, r25	; 18
	PORTA=0x00;
  aa:	1b ba       	out	0x1b, r1	; 27

	for(;;)
	{
		PORTB&=~_BV(0);
  ac:	c0 98       	cbi	0x18, 0	; 24
		PORTB&=~_BV(1);
  ae:	c1 98       	cbi	0x18, 1	; 24
		if((bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_set(PINA,0))&&(bit_is_set(PINA,5))) 
  b0:	c9 99       	sbic	0x19, 1	; 25
  b2:	0c c0       	rjmp	.+24     	; 0xcc <main+0x2e>
  b4:	ca 99       	sbic	0x19, 2	; 25
  b6:	0a c0       	rjmp	.+20     	; 0xcc <main+0x2e>
  b8:	cb 99       	sbic	0x19, 3	; 25
  ba:	08 c0       	rjmp	.+16     	; 0xcc <main+0x2e>
  bc:	c8 9b       	sbis	0x19, 0	; 25
  be:	06 c0       	rjmp	.+12     	; 0xcc <main+0x2e>
  c0:	cd 9b       	sbis	0x19, 5	; 25
  c2:	04 c0       	rjmp	.+8      	; 0xcc <main+0x2e>
		{
			Drive_motor(1,1);
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
		}
		if((bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,0))&&(bit_is_clear(PINA,5))) 
  cc:	c9 99       	sbic	0x19, 1	; 25
  ce:	0c c0       	rjmp	.+24     	; 0xe8 <main+0x4a>
  d0:	ca 99       	sbic	0x19, 2	; 25
  d2:	0a c0       	rjmp	.+20     	; 0xe8 <main+0x4a>
  d4:	cb 99       	sbic	0x19, 3	; 25
  d6:	08 c0       	rjmp	.+16     	; 0xe8 <main+0x4a>
  d8:	c8 99       	sbic	0x19, 0	; 25
  da:	06 c0       	rjmp	.+12     	; 0xe8 <main+0x4a>
  dc:	cd 99       	sbic	0x19, 5	; 25
  de:	04 c0       	rjmp	.+8      	; 0xe8 <main+0x4a>
		{
			Drive_motor(1,1);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
		}
		if((bit_is_set(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_set(PINA,0)))
  e8:	c9 9b       	sbis	0x19, 1	; 25
  ea:	0a c0       	rjmp	.+20     	; 0x100 <main+0x62>
  ec:	ca 99       	sbic	0x19, 2	; 25
  ee:	08 c0       	rjmp	.+16     	; 0x100 <main+0x62>
  f0:	cb 99       	sbic	0x19, 3	; 25
  f2:	06 c0       	rjmp	.+12     	; 0x100 <main+0x62>
  f4:	c8 9b       	sbis	0x19, 0	; 25
  f6:	04 c0       	rjmp	.+8      	; 0x100 <main+0x62>
		{
			Drive_motor(0,1);
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
		}
		if((bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,4))&&(bit_is_set(PINA,0)))
 100:	c9 9b       	sbis	0x19, 1	; 25
 102:	0c c0       	rjmp	.+24     	; 0x11c <main+0x7e>
 104:	ca 9b       	sbis	0x19, 2	; 25
 106:	0a c0       	rjmp	.+20     	; 0x11c <main+0x7e>
 108:	cb 99       	sbic	0x19, 3	; 25
 10a:	08 c0       	rjmp	.+16     	; 0x11c <main+0x7e>
 10c:	cc 99       	sbic	0x19, 4	; 25
 10e:	06 c0       	rjmp	.+12     	; 0x11c <main+0x7e>
 110:	c8 9b       	sbis	0x19, 0	; 25
 112:	04 c0       	rjmp	.+8      	; 0x11c <main+0x7e>
		{
			Drive_motor(0,1);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
		}
		if((bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
 11c:	c9 99       	sbic	0x19, 1	; 25
 11e:	0a c0       	rjmp	.+20     	; 0x134 <main+0x96>
 120:	ca 99       	sbic	0x19, 2	; 25
 122:	08 c0       	rjmp	.+16     	; 0x134 <main+0x96>
 124:	cb 9b       	sbis	0x19, 3	; 25
 126:	06 c0       	rjmp	.+12     	; 0x134 <main+0x96>
 128:	cc 9b       	sbis	0x19, 4	; 25
 12a:	04 c0       	rjmp	.+8      	; 0x134 <main+0x96>
		{
			Drive_motor(1,0);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
		}
		if((bit_is_clear(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_clear(PINA,0))&&(bit_is_set(PINA,4)))
 134:	c9 99       	sbic	0x19, 1	; 25
 136:	0c c0       	rjmp	.+24     	; 0x150 <main+0xb2>
 138:	ca 9b       	sbis	0x19, 2	; 25
 13a:	0a c0       	rjmp	.+20     	; 0x150 <main+0xb2>
 13c:	cb 9b       	sbis	0x19, 3	; 25
 13e:	08 c0       	rjmp	.+16     	; 0x150 <main+0xb2>
 140:	c8 99       	sbic	0x19, 0	; 25
 142:	06 c0       	rjmp	.+12     	; 0x150 <main+0xb2>
 144:	cc 9b       	sbis	0x19, 4	; 25
 146:	04 c0       	rjmp	.+8      	; 0x150 <main+0xb2>
		{
			Drive_motor(1,0);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
		}
		if((bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_clear(PINA,0))&&(bit_is_clear(PINA,4)))
 150:	c9 9b       	sbis	0x19, 1	; 25
 152:	0c c0       	rjmp	.+24     	; 0x16c <main+0xce>
 154:	ca 9b       	sbis	0x19, 2	; 25
 156:	0a c0       	rjmp	.+20     	; 0x16c <main+0xce>
 158:	cb 9b       	sbis	0x19, 3	; 25
 15a:	08 c0       	rjmp	.+16     	; 0x16c <main+0xce>
 15c:	c8 99       	sbic	0x19, 0	; 25
 15e:	06 c0       	rjmp	.+12     	; 0x16c <main+0xce>
 160:	cc 99       	sbic	0x19, 4	; 25
 162:	04 c0       	rjmp	.+8      	; 0x16c <main+0xce>
		{
			Drive_motor(0,0);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
		}
		if((bit_is_clear(PINA,0))&&(bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,4)))
 16c:	c8 99       	sbic	0x19, 0	; 25
 16e:	0c c0       	rjmp	.+24     	; 0x188 <main+0xea>
 170:	c9 9b       	sbis	0x19, 1	; 25
 172:	0a c0       	rjmp	.+20     	; 0x188 <main+0xea>
 174:	ca 9b       	sbis	0x19, 2	; 25
 176:	08 c0       	rjmp	.+16     	; 0x188 <main+0xea>
 178:	cb 9b       	sbis	0x19, 3	; 25
 17a:	06 c0       	rjmp	.+12     	; 0x188 <main+0xea>
 17c:	cc 9b       	sbis	0x19, 4	; 25
 17e:	04 c0       	rjmp	.+8      	; 0x188 <main+0xea>
		{
			Drive_motor(1,0);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
		}
		/*if((bit_is_set(PINA,0))&&(bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,4)))
		{
			Drive_motor(2,1);
		} //Try in arena** */
		if((bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,0))&&(bit_is_clear(PINA,4)))
 188:	c9 9b       	sbis	0x19, 1	; 25
 18a:	0c c0       	rjmp	.+24     	; 0x1a4 <main+0x106>
 18c:	ca 9b       	sbis	0x19, 2	; 25
 18e:	0a c0       	rjmp	.+20     	; 0x1a4 <main+0x106>
 190:	cb 9b       	sbis	0x19, 3	; 25
 192:	08 c0       	rjmp	.+16     	; 0x1a4 <main+0x106>
 194:	c8 9b       	sbis	0x19, 0	; 25
 196:	06 c0       	rjmp	.+12     	; 0x1a4 <main+0x106>
 198:	cc 99       	sbic	0x19, 4	; 25
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <main+0x106>
		{
			Drive_motor(1,0);
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
		}
		/*if((bit_is_clear(PINA,1))&&(bit_is_clear(PINA,2))&&(bit_is_clear(PINA,3))&&(bit_is_clear(PINA,0))&&(bit_is_set(PINA,4)))
		{
			Drive_motor(1,2);
		}// Try in arena** */
		if((bit_is_set(PINA,1))&&(bit_is_set(PINA,2))&&(bit_is_set(PINA,3))&&(bit_is_set(PINA,0))&&(bit_is_set(PINA,4)))
 1a4:	c9 9b       	sbis	0x19, 1	; 25
 1a6:	82 cf       	rjmp	.-252    	; 0xac <main+0xe>
 1a8:	ca 9b       	sbis	0x19, 2	; 25
 1aa:	80 cf       	rjmp	.-256    	; 0xac <main+0xe>
 1ac:	cb 9b       	sbis	0x19, 3	; 25
 1ae:	7e cf       	rjmp	.-260    	; 0xac <main+0xe>
 1b0:	c8 9b       	sbis	0x19, 0	; 25
 1b2:	7c cf       	rjmp	.-264    	; 0xac <main+0xe>
 1b4:	cc 9b       	sbis	0x19, 4	; 25
 1b6:	7a cf       	rjmp	.-268    	; 0xac <main+0xe>
		{
			Drive_motor(2,2); // reverse if out of loop. Finds loop again
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	62 e0       	ldi	r22, 0x02	; 2
 1bc:	0e 94 36 00 	call	0x6c	; 0x6c <Drive_motor>
 1c0:	75 cf       	rjmp	.-278    	; 0xac <main+0xe>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
