
timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006b4  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000054  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000002a  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000ac  00000000  00000000  000008ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000077  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000b5  00000000  00000000  000009d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000a88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000085  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e0       	ldi	r30, 0x06	; 6
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	a0 30       	cpi	r26, 0x00	; 0
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a0 30       	cpi	r26, 0x00	; 0
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  c2:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <inittimer0>:
#include<avr/io.h>
#include<util/delay.h>
void inittimer0(){
	TCCR0|=((1<<0)|(1<<1)|(1<<2)); //divide by 1024
  ca:	83 b7       	in	r24, 0x33	; 51
  cc:	87 60       	ori	r24, 0x07	; 7
  ce:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
  d0:	12 be       	out	0x32, r1	; 50
}
  d2:	08 95       	ret

000000d4 <main>:
#include<avr/io.h>
#include<util/delay.h>
void inittimer0(){
	TCCR0|=((1<<0)|(1<<1)|(1<<2)); //divide by 1024
  d4:	83 b7       	in	r24, 0x33	; 51
  d6:	87 60       	ori	r24, 0x07	; 7
  d8:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;
  da:	12 be       	out	0x32, r1	; 50
}
void main(){
	inittimer0();
		
	int count;	
	DDRC=0xff;	
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	84 bb       	out	0x14, r24	; 20
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
	while(1){
	
	while(!(TIFR&(1<<0))); //wait till overflow
  e4:	06 b6       	in	r0, 0x36	; 54
  e6:	00 fe       	sbrs	r0, 0
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <main+0x10>
		TIFR|=(1<<0); //in polling method, flag needs to be cleared. this done by writing 1 to the flag.		
  ea:	86 b7       	in	r24, 0x36	; 54
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	86 bf       	out	0x36, r24	; 54
		count++;
  f0:	2f 5f       	subi	r18, 0xFF	; 255
  f2:	3f 4f       	sbci	r19, 0xFF	; 255
		if(count==61){
  f4:	2d 33       	cpi	r18, 0x3D	; 61
  f6:	31 05       	cpc	r19, r1
  f8:	a9 f7       	brne	.-22     	; 0xe4 <main+0x10>
			PORTC^=0xff;
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	80 95       	com	r24
  fe:	85 bb       	out	0x15, r24	; 21
 100:	ef cf       	rjmp	.-34     	; 0xe0 <main+0xc>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
